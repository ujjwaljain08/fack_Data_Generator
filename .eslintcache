[{"A:\\react-do\\faker\\src\\index.js":"1","A:\\react-do\\faker\\src\\App.js":"2","A:\\react-do\\faker\\src\\Form.js":"3","A:\\react-do\\faker\\src\\data\\option.js":"4","A:\\react-do\\faker\\src\\Navbar.js":"5"},{"size":228,"mtime":1611217063773,"results":"6","hashOfConfig":"7"},{"size":250,"mtime":1615354387339,"results":"8","hashOfConfig":"7"},{"size":4081,"mtime":1611234200333,"results":"9","hashOfConfig":"7"},{"size":4477,"mtime":1611217423032,"results":"10","hashOfConfig":"7"},{"size":414,"mtime":1615354406267,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1jnmxon",{"filePath":"14","messages":"15","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"16","messages":"17","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"A:\\react-do\\faker\\src\\index.js",[],"A:\\react-do\\faker\\src\\App.js",["23","24"],"A:\\react-do\\faker\\src\\Form.js",["25"],"import React,{useState} from 'react';\r\nimport {options,dataTemplate} from \"./data/option\";\r\nimport \r\n{Grid,Paper,Box,\r\n    FormControl,\r\n    InputLabel,\r\n    Select,\r\n    TextField,\r\n    Chip,\r\n    MenuItem,\r\n    makeStyles,Button} from \"@material-ui/core\";\r\n    \r\nimport faker from \"faker\";\r\nimport download from \"downloadjs\";\r\n\r\n const categories=Object.keys(options);\r\n\r\n\r\n\r\nconst usedStyles=makeStyles(theme =>({\r\n    FormControl:{\r\n        minWidth:\"100%\"\r\n    },\r\n    chips:{\r\n        display:\"flex\",\r\n        flexWrap:\"wrap\"\r\n    },\r\n    chip:{\r\n        margin:2,\r\n    }\r\n\r\n}),)\r\n\r\nconst Form = (props) => {\r\n    const classes=usedStyles();\r\n    const [data, setData] = useState(dataTemplate);\r\n    const [numberofdata, setNumberOfData] = useState(1)\r\n    const handleChange=(event)=>{\r\n       \r\n        console.log(event.target.name,event.target.value);\r\n        let copyData={...data };\r\n        copyData[event.target.name]={}\r\n        event.target.value.forEach(item =>{\r\n            copyData[event.target.name][item]=\"\";\r\n        })\r\n        setData(copyData);\r\n    };\r\n    const generatData=()=>{\r\n        let copyData=options;\r\n        let array=[];\r\n        for(let i=0;i<numberofdata;i++){\r\n            for(let category of categories){\r\n                for(let key of Object.keys(options[category])){\r\n                    if(data[category][key]!=undefined){\r\n                        copyData[category][key]=faker[category][key]();\r\n                    }\r\n                }\r\n           }\r\n           array.push(copyData);\r\n           copyData=options;\r\n        }\r\n         download(JSON.stringify(array),\"Fake_Data.json\",\"json\")\r\n         setNumberOfData(1);\r\n         setData(dataTemplate)\r\n    }\r\n    \r\n    return (\r\n        <>\r\n            <div>\r\n            <Grid container spacing={2}>\r\n                {\r\n                   categories.map(category =>(\r\n                       <Grid item sm={3}>\r\n                        <Paper component={Box} p={3}>\r\n                           <FormControl className={classes.FormControl}>\r\n                               <InputLabel>{category}</InputLabel>\r\n                               <Select \r\n                               renderValue={(sel)=>(\r\n                                   <div className={classes.chips}>\r\n                                       {\r\n                                        sel.map((value)=>(\r\n                                            <Chip className={classes.chip} key={value} label={value} />\r\n                                        ))\r\n\r\n                                       }\r\n                                   </div>\r\n                               )}\r\n                               name={category}\r\n                               fullWidth\r\n                               multiple\r\n                               value={Object.keys(data[category])}\r\n                               onChange={handleChange}\r\n                               >\r\n                                {\r\n                                    Object.keys(options[category]).map(name =>(\r\n                                       <MenuItem key={name} value={name}>{name}</MenuItem>\r\n\r\n                                    ))\r\n                                   \r\n                                }\r\n                             \r\n                               </Select>\r\n                           </FormControl>\r\n                       </Paper>\r\n                       </Grid>\r\n                       \r\n                      \r\n                   )) \r\n                }\r\n            </Grid>\r\n        </div>\r\n        <Paper component={Box} my={1} p={3}>\r\n            <TextField fullWidth value={numberofdata}\r\n             onChange={(e) =>setNumberOfData(e.target.value)} \r\n             variant=\"outlined\" label=\"enter the no. fake data\"\r\n              placeholder=\"enter the no.\"\r\n              \r\n              > </TextField>\r\n                \r\n        </Paper><Button variant=\"contained\" color=\"secondary\"\r\n                onClick={generatData}>Click To Get</Button>\r\n\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Form;\r\n","A:\\react-do\\faker\\src\\data\\option.js",[],"A:\\react-do\\faker\\src\\Navbar.js",[],{"ruleId":"26","severity":1,"message":"27","line":2,"column":9,"nodeType":"28","messageId":"29","endLine":2,"endColumn":18},{"ruleId":"26","severity":1,"message":"30","line":2,"column":19,"nodeType":"28","messageId":"29","endLine":2,"endColumn":22},{"ruleId":"31","severity":1,"message":"32","line":54,"column":43,"nodeType":"33","messageId":"34","endLine":54,"endColumn":45},"no-unused-vars","'Container' is defined but never used.","Identifier","unusedVar","'Box' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected"]